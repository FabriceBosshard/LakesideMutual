trigger:
- master

resources:
- repo: self

parameters:  
  - name: imageList
    type: object
    default: ["customer-management-frontend"]

variables:
  containerRegistry: 'lakesideapp.azurecr.io'
  tag: 'lakesidemutual'
  resourceGroupName: 'Lakeside'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    steps:
    - ${{ each image in parameters.imageList }}:
      - task: DockerCompose@0
        inputs:
          containerregistrytype: 'Azure Container Registry'
          azureSubscription: 'Azure for Students(51fc861f-a84b-440f-bfd1-f4cf184c15d3)'
          azureContainerRegistry: '{"loginServer":"lakesideapp.azurecr.io", "id" : "/subscriptions/51fc861f-a84b-440f-bfd1-f4cf184c15d3/resourceGroups/Lakeside/providers/Microsoft.ContainerRegistry/registries/LakesideApp"}'
          dockerComposeFile: 'docker-compose.yml'
          action: 'Run a Docker Compose command'
          dockerComposeCommand: 'build ${{image}}'
    - ${{ each image in parameters.imageList }}:
      - task: DockerCompose@0
        inputs:
          containerregistrytype: 'Azure Container Registry'
          azureSubscription: 'Azure for Students(51fc861f-a84b-440f-bfd1-f4cf184c15d3)'
          azureContainerRegistry: '{"loginServer":"lakesideapp.azurecr.io", "id" : "/subscriptions/51fc861f-a84b-440f-bfd1-f4cf184c15d3/resourceGroups/Lakeside/providers/Microsoft.ContainerRegistry/registries/LakesideApp"}'
          dockerComposeFile: 'docker-compose.yml'
          action: 'Run a Docker Compose command'
          dockerComposeCommand: 'push lakesideapp.azurecr.io/lakesidemutual/${{image}}'
          
- stage: RestartContainers
  displayName: Restart Container Instances
  dependsOn: Build
  jobs:
  - job: Restart
    displayName: Restart
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Azure for Students(51fc861f-a84b-440f-bfd1-f4cf184c15d3)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          container_instances=$(az container list --resource-group $(resourceGroupName) --query "[].name" -o tsv)
          for instance in $container_instances; do
              az container restart --name $instance --resource-group $(resourceGroupName)
          done
